# Cleanup
diptheria<-WHOvaccinecleaner(diptheria)
# Streamline
names(diptheria)<-c("Year","Country","Code","DTP")
# Transforming and cleaning - GDP - Economic
gdp<-read.csv("../Resources/Raw/GDP.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 4)
# Cleanup
gdp<-WorldBankCleaner(gdp)
# Streamline
names(gdp)<-c("Country","Code","Year","GDP")
# Transforming and cleaning - GDP Growth - Economic
gdp_growth<-read.csv("../Resources/Raw/GDP_per_capita_growth.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 4)
# Cleanup
gdp_growth<-WorldBankCleaner(gdp_growth)
# Streamline
names(gdp_growth)<-c("Country","Code","Year","GDPG")
# Transforming and cleaning - Health Expenditure - Economic
he<-read.csv("../Resources/Raw/Health Expenditure.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
# Remove unwanted fields
he<-select(he,-c(Indicators,X))
he<-tail(he,-1) # Removing first after header
# Transform
he<-gather(he,key="Year",value="HE_Code",X2000:X2019)
# Converting to proper format
he$Year<-gsub("X","",he$Year)%>%as.numeric(as.character(he$Year))
he$HE_Code<-as.numeric(he$HE_Code)
# Checking for missing data
he%>%group_by(Countries)%>%miss_var_summary()%>%filter(n_miss>0)
# Handling missing data
he<-he%>%group_by(Countries)%>%filter(!mean(is.na(HE_Code)) >= 0.2)
he%>%group_by(Countries)%>%miss_var_summary()%>%filter(n_miss>0)
he<-he%>%group_by(Countries)%>%mutate(HE_Code = imputeTS::na_interpolation(HE_Code))
# Streamline
names(he)<-c("Country","Year","HE")
# Transforming and cleaning - Obesity - Habits
obesity<-read.csv("../Resources/Raw/Obesity_prevelance.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
# Remove unwanted fields
obesity<-select(obesity,-c(which(grepl("\\.",names(obesity))))) #Columns for male and female contained "." since they were repeats
obesity<-tail(obesity,-3) # Removing first 3 rows after header
# Transform
obesity<-gather(obesity,key="Year",value="Obesity",X2016:X1975)
# Converting year to proper format
obesity$Year<-gsub("X","",obesity$Year)%>%as.numeric(as.character(obesity$Year))
# Converting obese people percentage to proper format
obesity$Obesity<-str_remove(obesity$Obesity,"\\[.*\\]")%>%as.numeric(obesity$Obesity)
# Extending the data
obesity<-obesity%>%complete(Year=seq(2017,2019),X)
obesity<-obesity%>%filter(Year>=2000)%>%group_by(X)%>%fill(Obesity,.direction ="up")
# Checking for missing data
obesity%>%group_by(X)%>%miss_var_summary()%>%filter(n_miss>0)
# Handling missing data
obesity<-drop_na(obesity)
# Streamline
names(obesity)<-c("Year","Country","OBP")
# Transforming and cleaning - Cancer - Health
cancer<-read.csv("../Resources/Raw/Cancer.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE,na.strings="")
# Streamline
names(cancer)<-c("Country","Code","Year","CANP")
# Subsetting data
cancer<-subset(cancer,Year>=2000)
# Handling missing values
cancer%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
cancer<-drop_na(cancer)
cancer%>%group_by(Year)%>%count()
# Filling missing values
cancer<-cancer%>%complete(Year=seq(2000,2019),Country)%>%group_by(Country)%>%fill(c(Code,CANP),.direction="down") #Extending to 2019
cancer%>%group_by(Year)%>%count()
# Transforming and cleaning - Diabetes - Health
diabetes<-read.csv("../Resources/Raw/Diabetes.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
# Streamline
diabetes<-select(diabetes,-c(Lower.95..uncertainty.interval,
Upper.95..uncertainty.interval))
names(diabetes)<-c("Country","Code","Sex","Year","DB")
# Transform
diabetes<-spread(diabetes,key="Sex",value="DB")
# Average
diabetes$DB<-(diabetes$Men+diabetes$Women)/2
# Removing unwanted data
diabetes<-diabetes%>%subset(Year>=2000)%>%select(-c(Men,Women))
# Handling missing values
diabetes%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
diabetes%>%group_by(Year)%>%count()
# Transforming and cleaning - SexRatio - Socio-Economic
sr<-read.csv("../Resources/Raw/SexRatio.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE,skip=1)
# Remove unwanted fields
sr<-select(sr,-c(ISO.3166.1.numeric.code,Note))
sr<-tail(sr,-2)
# Transform
sr<-gather(sr,key="Year",value="SR_Code",X1950:X2020)
# Converting to proper format
sr$Year<-gsub("X","",sr$Year)%>%as.numeric(as.character(sr$Year))
sr$Location<-trimws(sr$Location)
#Subsetting year
sr<-subset(sr,Year>=2000&Year<=2019)
# Checking for missing data
sr%>%group_by(Location)%>%miss_var_summary()%>%filter(n_miss>0)
# Handling missing data
sr<-sr%>%group_by(Location)%>%filter(!mean(is.na(SR_Code)) == 1)
sr%>%group_by(Location)%>%miss_var_summary()%>%filter(n_miss>0)
# Extending data
sr<-sr%>%complete(Year=seq(min(Year),max(Year)),Location)%>%group_by(Location)%>%fill(SR_Code,.direction="down")
# Streamline
names(sr)<-c("Year","Country","SR")
# Transforming and Cleaning - Drinking Water - Socio-Economic
dw<-read.csv("../Resources/Raw/Drinking_water.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 6)
# Cleanup
dw<- UNDPCleanerA(dw)
# Streamline
names(dw)<-c("Year", "Country","DRNW")
# Transforming and Cleaning - Sanitation - Socio-Economic
sanitation<-read.csv("../Resources/Raw/Sanitation_Services.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 6)
# Cleanup
sanitation<-UNDPCleanerA(sanitation)
# Streamline
names(sanitation)<-c("Year", "Country","SAN")
# Transforming and Cleaning - Human Development Index (HDI) - Development Factors
hdi<-read.csv('../Resources/Raw/Human Development Index (HDI).csv',check.names=TRUE,header=TRUE,sep=',',stringsAsFactors=FALSE,skip=5)
# Cleanup
hdi<-UNDPCleaner(hdi)
# Streamline
names(hdi)<-c("Country","Year","HDI")
# Transforming and Cleaning - Income - Development Factors
income<-read.csv('../Resources/Raw/Income index.csv',check.names=TRUE,header=TRUE,sep=',',stringsAsFactors=FALSE,skip=5)
# Cleanup
income<-UNDPCleaner(income)
# Streamline
names(income)<-c("Country","Year","INCI")
# Transforming and Cleaning - Education - Development Factors
edu<-read.csv('../Resources/Raw/Education index.csv',check.names=TRUE,header=TRUE,sep=',',stringsAsFactors=FALSE,skip=5)
# Cleanup
edu<-UNDPCleaner(edu)
# Streamline
names(edu)<-c("Country","Year","EDI")
# Transforming and cleaning - Mortality Rate -Infant
Mortality_Infant<-read.csv("../Resources/Raw/Mortality Rate_Infant.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 4)
# Cleanup
Mortality_Infant<-WorldBankCleaner(Mortality_Infant)
# Streamline
names(Mortality_Infant)<-c("Country","Code","Year","INFMR")
# Transforming and cleaning - Adult Mortality Rate -Female
Mortality_Female<-read.csv("../Resources/Raw/Mortality_rate_female.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 4)
# Cleanup
Mortality_Female<-WorldBankCleaner(Mortality_Female)
# Streamline
names(Mortality_Female)<-c("Country","Code","Year","AMRF")
# Transforming and cleaning - Adult Mortality Rate -Male
Mortality_Male<-read.csv("../Resources/Raw/Mortality_rate_male.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 4)
# Cleanup
Mortality_Male<-WorldBankCleaner(Mortality_Male)
# Streamline
names(Mortality_Male)<-c("Country","Code","Year","AMRM")
#Merged Female and Male Mortality values
Adult_Mortality = merge(x=Mortality_Female,y=Mortality_Male,by=c("Country","Year","Code"), all=TRUE)
#Taking average of adult mortality Male and Female values
clnames <- c("AMRF","AMRM")
Adult_Mortality$AMR  <- rowMeans( Adult_Mortality[,clnames] )
Adult_Mortality<-select(Adult_Mortality,c(Country,Code, Year, AMR))
names(Adult_Mortality)<-c("Country","Code","Year","AMR")
# Transforming and cleaning - Population Density
options(scipen = 999)
PD<-read.csv("../Resources/Raw/Population_Density.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 4)
# Cleanup
PD<-WorldBankCleaner(PD)
# Streamline
names(PD)<-c("Country","Code","Year","POPD")
# Transforming and cleaning - Population Growth
PG<-read.csv("../Resources/Raw/Population_Growth.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 4)
# Cleanup
PG<-WorldBankCleaner(PG)
# Streamline
names(PG)<-c("Country","Code","Year","POPG")
# Transforming and cleaning - Happiness World Excel data
#Code block for extracting happiness score for 2015
Hap1_df<-read.csv("../Resources/Raw/2015.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Hap1_df$Year <- 2015
Hap1_df<-select(Hap1_df,c(Country, Year, Happiness.Score))
names(Hap1_df)<-c("Country","Year", "HAPS")
#Code block for extracting happiness score for 2016
Hap2_df<-read.csv("../Resources/Raw/2016.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Hap2_df$Year <- 2016
Hap2_df<-select(Hap2_df,c(Country, Year, Happiness.Score))
names(Hap2_df)<-c("Country","Year", "HAPS")
#Code block for extracting happiness score for 2017
Hap3_df<-read.csv("../Resources/Raw/2017.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Hap3_df$Year <- 2017
Hap3_df<-select(Hap3_df,c(Country, Year, Happiness.Score))
names(Hap3_df)<-c("Country","Year", "HAPS")
#Code block for extracting happiness score for 2018
Hap4_df<-read.csv("../Resources/Raw/2018.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Hap4_df$Year <- 2018
Hap4_df<-select(Hap4_df,c(Country.or.region, Year, Score))
names(Hap4_df)<-c("Country","Year", "HAPS")
#Code block for extracting happiness score for 2019
Hap5_df<-read.csv("../Resources/Raw/2019.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Hap5_df$Year <- 2019
Hap5_df<-select(Hap5_df,c(Country.or.region, Year, Score))
names(Hap5_df)<-c("Country","Year", "HAPS")
#To combine data vertically for all Happiness data sets for years 2015, 2016, 2017, 2018 and 2019
Hap_df <-rbind(Hap1_df, Hap2_df, Hap3_df, Hap4_df, Hap5_df)
#Check for missing values
Hap_df%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
# Clean and modify Status
Status<-read.csv("../Resources/Raw/Life Expectancy Data.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Status<-subset(Status,Year==2015)
Status<-select(Status,c(Country,Status))
# Human Development
# World Bank data
#Merge
HD_WB<-Reduce(function(...) merge(..., by=c("Country","Year","Code"),all=TRUE), list(le,gdp,gdp_growth,Mortality_Infant,Adult_Mortality))
#Clean Country Code
HD_WB<-CountryCoder(HD_WB)
# UNDP Data
#Merge
HD_UN<-Reduce(function(...) merge(..., by=c("Country","Year"),all=TRUE), list(hdi,edu,income))
#Clean Country Code
HD_UN<-CountryCoder(HD_UN)
# Health Expenditure-Clean Country Code
he_m<-CountryCoder(he)
# Complete merge
HD<-Reduce(function(...) merge(..., by=c("Code","Year"),all=TRUE), list(HD_WB,HD_UN,he_m))
# Transform to long format
human_development<-gather(HD,key="ind_cd",value="ind_value",na.rm=TRUE,LE:HE)
# Streamline
names(human_development)<-c("ctry_cd","year","ind_cd","ind_value")
# Substance Abuse
#Clean Country Code
Alcohol_consumption_m<-CountryCoder(Alcohol_consumption)
# Transform to long format
substance_abuse<-gather(Alcohol_consumption_m,key="ind_id",value="ind_value",na.rm=TRUE,ALC)
# Streamline
names(substance_abuse)<-c("year","ctry_cd","ind_cd","ind_value")
substance_abuse<-substance_abuse[,c("ctry_cd","year","ind_cd","ind_value")]
# Social Determinants
# World Bank data
#Merge
SD_WB<-Reduce(function(...) merge(..., by=c("Country","Year","Code"),all=TRUE), list(PD,PG))
#Clean Country Code
SD_WB<-CountryCoder(SD_WB)
# UNDP Data
#Merge
SD_UN<-Reduce(function(...) merge(..., by=c("Country","Year"),all=TRUE), list(dw,sanitation))
#Clean Country Code
SD_UN<-CountryCoder(SD_UN)
# Sex Ratio - Clean Country Code
sr_m<-CountryCoder(sr)
# Happiness Score - Clean Country Code
Hap_df_m<-CountryCoder(Hap_df)
#Averaging based on Code to handle duplicates for Cyprus
Hap_df_m<-Hap_df_m%>%group_by(Code,Year)%>%summarize(HAPS=mean(HAPS),.groups='keep')%>%ungroup()
# Complete merge
SD<-Reduce(function(...) merge(..., by=c("Code","Year"),all=TRUE), list(SD_WB,SD_UN,sr_m,Hap_df_m))
# Transform to long format
social_determinants<-gather(SD,key="ind_cd",value="ind_value",na.rm=TRUE,POPD:HAPS)
# Streamline
names(social_determinants)<-c("ctry_cd","year","ind_cd","ind_value")
# Infection Control Prevention
# Merge
vaccination<-Reduce(function(...) merge(..., by=c("Country","Year","Code"),all=TRUE), list(BCG,measles,hepatitis,diptheria))
# Clean Country Code
vaccination<-CountryCoder(vaccination)
# Transform to long format
infect_ctrl_prevent<-gather(vaccination,key="ind_id",value="ind_value",na.rm=TRUE,BCG:DTP)
# Streamline
names(infect_ctrl_prevent)<-c("year","ctry_cd","ind_cd","ind_value")
infect_ctrl_prevent<-infect_ctrl_prevent[,c("ctry_cd","year","ind_cd","ind_value")]
# Infection Control Prevention
# Cancer - Clean Country Code
cancer_m<-cancer
#Handling inconsistent Country values
cancer_m$Country<-replace(cancer_m$Country,cancer_m$Country=="Micronesia (country)","Micronesia (Federated States of)")
cancer_m$Country<-replace(cancer_m$Country,cancer_m$Country=="Timor","Timor-Leste")
#Replace country code
cancer_m<-CountryCoder(cancer_m)
# Diabetes - Clean Country Code
diabetes_m<-CountryCoder(diabetes)
# Obesity - Clean Country Code
obesity_m<-CountryCoder(obesity)
# Merge
disease_int<-Reduce(function(...) merge(...,by=c("Year","Code"),all=TRUE), list(cancer_m,diabetes_m,obesity_m))
# Transform to long format
disease<-gather(disease_int,key="ind_id",value="ind_value",na.rm=TRUE,CANP:OBP)
# Streamline
names(disease)<-c("year","ctry_cd","ind_cd","ind_value")
disease<-disease[,c("ctry_cd","year","ind_cd","ind_value")]
CC_1<-select(HD,c(Code))
CC_2<-select(Alcohol_consumption_m,c(Code))
CC_3<-select(SD,c(Code))
CC_4<-select(vaccination,c(Code))
CC_5<-select(disease_int,c(Code))
# Join all tables based on unique entries
CC<-Reduce(function(...) merge(...,by=c("Code"),all=TRUE), list(CC_1,CC_2,CC_3,CC_4,CC_5))
# Retrieve country name and region  based on the code
CC$Country<-countrycode(CC$Code,"iso3c","country.name",warn=FALSE)
# Join all tables based on unique entries
CC<-Reduce(function(...) merge(...,all=TRUE), list(CC_1,CC_2,CC_3,CC_4,CC_5))
# Join all tables based on unique entries
CC<-bind_rows(CC_1,CC_2,CC_3,CC_4,CC_5)
# Join all tables based on unique entries
CC<-Reduce(merge, list(CC_1,CC_2,CC_3,CC_4,CC_5))
# Join all tables based on unique entries
CC<-distinct(bind_rows(CC_1,CC_2,CC_3,CC_4,CC_5))
View(CC)
CC_1<-select(HD,c(Code))
CC_2<-select(Alcohol_consumption_m,c(Code))
CC_3<-select(SD,c(Code))
CC_4<-select(vaccination,c(Code))
CC_5<-select(disease_int,c(Code))
# Join all tables based on unique entries
CC<-distinct(bind_rows(CC_1,CC_2,CC_3,CC_4,CC_5))
# Retrieve country name and region  based on the code
CC$Country<-countrycode(CC$Code,"iso3c","country.name",warn=FALSE)
CC$Region<-countrycode(CC$Code,"iso3c","region",warn=FALSE)
CC%>%filter(is.na(Country))
# Check duplicates
CC%>%group_by(Code)%>%count()%>%filter(n>1)
# Adding status column
Status$Code<-countrycode(Status$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values
filter(Status,is.na(Code))
#Drop country
Status<-select(Status,-c(Country))
# Merge
country<-merge(CC,Status,by="Code",all=TRUE)
country%>%filter(is.na(Status))%>%count()
# Streamline
names(country)<-c("ctry_cd","ctry_desc","region","status")
res<-dbSendQuery(con,'DELETE FROM human_development')
con<-dbConnect(RPostgres::Postgres(),
host     = "aws-database.csfizhoftmnn.us-east-1.rds.amazonaws.com",
dbname   = "Final_Project",
user     = rstudioapi::askForPassword("Database user"),
password = rstudioapi::askForPassword("Database password"),
port     = 5432)
res<-dbSendQuery(con,'DELETE FROM human_development')
dbClearResult(res)
dbWriteTable(con,"human_development",human_development,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM substance_abuse')
dbClearResult(res)
dbWriteTable(con,"substance_abuse",substance_abuse,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM social_determinants')
dbClearResult(res)
dbWriteTable(con,"social_determinants",social_determinants,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM country')
res<-dbSendQuery(con,'DELETE FROM human_development')
res<-dbSendQuery(con,'DELETE FROM substance_abuse')
res<-dbSendQuery(con,'DELETE FROM country')
dbClearResult(res)
dbWriteTable(con,"country",country,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM human_development')
dbClearResult(res)
dbWriteTable(con,"human_development",human_development,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM substance_abuse')
dbClearResult(res)
dbWriteTable(con,"substance_abuse",substance_abuse,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM social_determinants')
dbClearResult(res)
dbWriteTable(con,"social_determinants",social_determinants,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM infect_ctrl_prevent')
dbClearResult(res)
dbWriteTable(con,"infect_ctrl_prevent",infect_ctrl_prevent,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM disease')
dbClearResult(res)
dbWriteTable(con,"disease",disease,append=TRUE,overwrite=FALSE)
# Transforming and cleaning - Diabetes - Health
diabetes<-read.csv("../Resources/Raw/Diabetes.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
# Streamline
diabetes<-select(diabetes,-c(Lower.95..uncertainty.interval,
Upper.95..uncertainty.interval))
names(diabetes)<-c("Country","Code","Sex","Year","DIABP")
# Transform
diabetes<-spread(diabetes,key="Sex",value="DIABP")
# Average
diabetes$DB<-(diabetes$Men+diabetes$Women)/2
# Removing unwanted data
diabetes<-diabetes%>%subset(Year>=2000)%>%select(-c(Men,Women))
# Handling missing values
diabetes%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
diabetes%>%group_by(Year)%>%count()
# Infection Control Prevention
# Cancer - Clean Country Code
cancer_m<-cancer
#Handling inconsistent Country values
cancer_m$Country<-replace(cancer_m$Country,cancer_m$Country=="Micronesia (country)","Micronesia (Federated States of)")
cancer_m$Country<-replace(cancer_m$Country,cancer_m$Country=="Timor","Timor-Leste")
#Replace country code
cancer_m<-CountryCoder(cancer_m)
# Diabetes - Clean Country Code
diabetes_m<-CountryCoder(diabetes)
# Obesity - Clean Country Code
obesity_m<-CountryCoder(obesity)
# Merge
disease_int<-Reduce(function(...) merge(...,by=c("Year","Code"),all=TRUE), list(cancer_m,diabetes_m,obesity_m))
# Transform to long format
disease<-gather(disease_int,key="ind_id",value="ind_value",na.rm=TRUE,CANP:OBP)
# Streamline
names(disease)<-c("year","ctry_cd","ind_cd","ind_value")
disease<-disease[,c("ctry_cd","year","ind_cd","ind_value")]
dbWriteTable(con,"disease",disease,append=TRUE,overwrite=FALSE)
View(disease_int)
View(diabetes)
View(diabetes)
# Transforming and cleaning - Diabetes - Health
diabetes<-read.csv("../Resources/Raw/Diabetes.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
# Streamline
diabetes<-select(diabetes,-c(Lower.95..uncertainty.interval,
Upper.95..uncertainty.interval))
names(diabetes)<-c("Country","Code","Sex","Year","DIABP")
# Transform
diabetes<-spread(diabetes,key="Sex",value="DIABP")
# Average
diabetes$DIABP<-(diabetes$Men+diabetes$Women)/2
# Removing unwanted data
diabetes<-diabetes%>%subset(Year>=2000)%>%select(-c(Men,Women))
# Handling missing values
diabetes%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
diabetes%>%group_by(Year)%>%count()
# Diabetes - Clean Country Code
diabetes_m<-CountryCoder(diabetes)
# Merge
disease_int<-Reduce(function(...) merge(...,by=c("Year","Code"),all=TRUE), list(cancer_m,diabetes_m,obesity_m))
# Transform to long format
disease<-gather(disease_int,key="ind_id",value="ind_value",na.rm=TRUE,CANP:OBP)
# Streamline
names(disease)<-c("year","ctry_cd","ind_cd","ind_value")
disease<-disease[,c("ctry_cd","year","ind_cd","ind_value")]
dbWriteTable(con,"disease",disease,append=TRUE,overwrite=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Database connection libraries
library(RPostgres)
# Profiling Library
library(DataExplorer)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Database connection libraries
library(RPostgres)
# Profiling Library
library(DataExplorer)
con<-dbConnect(RPostgres::Postgres(),
host     = "aws-database.csfizhoftmnn.us-east-1.rds.amazonaws.com",
dbname   = "Final_Project",
user     = rstudioapi::askForPassword("Database user"),
password = rstudioapi::askForPassword("Database password"),
port     = 5432)
data<-dbGetQuery(con,'SELECT * FROM indicators')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Database connection libraries
library(RPostgres)
# Profiling Library
library(DataExplorer)
con<-dbConnect(RPostgres::Postgres(),
host     = "aws-database.csfizhoftmnn.us-east-1.rds.amazonaws.com",
dbname   = "Final_Project",
user     = rstudioapi::askForPassword("Database user"),
password = rstudioapi::askForPassword("Database password"),
port     = 5432)
data<-dbGetQuery(con,'SELECT * FROM indicators')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# Database connection libraries
library(RPostgres)
# Profiling Library
library(DataExplorer)
con<-dbConnect(RPostgres::Postgres(),
host     = "aws-database.csfizhoftmnn.us-east-1.rds.amazonaws.com",
dbname   = "Final_Project",
user     = rstudioapi::askForPassword("Database user"),
password = rstudioapi::askForPassword("Database password"),
port     = 5432)
data<-dbGetQuery(con,'SELECT * FROM indicators')
#Data profile report
introduce(data)
#Visual representation of data at a high level
plot_intro(data)
#Visualize missing profile for each feature
plot_missing(data)
#Save results for reference
profile_missing(data)
#Transform to wide format
data_wide<-spread(data,key="indicator",value="value")
#Retrieve missing data from the wide format
plot_missing(data_wide)
#Profile data from  wide format
profile_missing(data_wide)
#Data Profile results
plot_intro(data_wide)
#Create data profiling report
create_report(data_wide)
#Drop columns for Happiness, drinking water and sanitation features data sets
data_drop<-subset(data_wide, select = -c(HAPS,SAN, DRNW, HEPB, DB))
#Drop columns for Happiness, drinking water and sanitation features data sets
data_drop<-subset(data_wide, select = -c(HAPS,SAN, DRNW, HEPB, DIABP))
#Retrieve missing data from the wide format
plot_missing(data_drop)
#Profile data from  wide format
profile_missing(data_drop)
#Data Profile results
plot_intro(data_wide)
#Create data profiling report
create_report(data_drop)
# Save long data in csv
write.csv(data,"../Resources/Project_Indicators_Long.csv",row.names = FALSE,fileEncoding="UTF-8")
# Save wide data in csv
write.csv(data_drop,"../Resources/Project_Indicators_Wide.csv",row.names = FALSE,fileEncoding="UTF-8")
stat_data<-data_drop%>%select(-c(country_code,country,region,status,year))%>%drop_na()
min_max_norm <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
norm<-as.data.frame(lapply(stat_data,min_max_norm))
summary(lm(LE~ALC+AMR+BCG+CANP+DTP+EDI+GDP+GDPG+HDI+HE+INCI+INFMR+MCV+OBP+POPD+POPG+SR,norm))
summary(lm(LE~AMR+CANP+EDI+GDP+HDI+HE+INCI+INFMR+MCV+OBP+POPG,norm))
