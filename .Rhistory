Mortality_Infant<-read.csv("../Resources/Raw/Mortality Rate_Infant.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 4)
# Remove unwanted fields
Mortality_Infant<-select(Mortality_Infant,-c(Indicator.Name,Indicator.Code,X))
# Transform year column to rows
Mortality_Infant<-gather(Mortality_Infant,key="Year",value="INFMR",X1960:X2020)
#Select only required fields
Mortality_Infant<-select(Mortality_Infant,c(Country.Name,Country.Code, Year, INFMR))
# Replace X character in year with space and converted to numeric data type
Mortality_Infant$Year<-gsub("X","",Mortality_Infant$Year)%>%as.numeric(as.character(Mortality_Infant$Year))
#Select data for year > 2000
Mortality_Infant<-subset(Mortality_Infant,Year>=2000)
#Customized column names
names(Mortality_Infant)<-c("Country","Code","Year","INFMR")
#Check for missing values
Mortality_Infant%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
# Handling missing values
Mortality_Infant<-Mortality_Infant%>%group_by(Country)%>%filter(!mean(is.na(INFMR)) >= 0.2)
Mortality_Infant%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
# Filling in missing values
# There was no data for missing values and so no interpolation was done.
# Transforming and cleaning - Adult Mortality Rate -Female
Mortality_Female<-read.csv("../Resources/Raw/Mortality_rate_female.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 4)
# Remove unwanted fields
Mortality_Female<-select(Mortality_Female,-c(Indicator.Name,Indicator.Code,X))
# Transform year column to rows
Mortality_Female<-gather(Mortality_Female,key="Year",value="AMRF",X1960:X2020)
#Select only required fields
Mortality_Female<-select(Mortality_Female,c(Country.Name,Country.Code, Year, AMRF))
# Replace X character in year with space and converted to numeric data type
Mortality_Female$Year<-gsub("X","",Mortality_Female$Year)%>%as.numeric(as.character(Mortality_Female$Year))
#Select data for year > 2000
Mortality_Female<-subset(Mortality_Female,Year>=2000)
#Customized column names
names(Mortality_Female)<-c("Country","Code","Year","AMRF")
#Check for missing values
Mortality_Female<-subset(Mortality_Female,Year<=2019)
Mortality_Female%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
# Handling missing values
Mortality_Female<-Mortality_Female%>%group_by(Country)%>%filter(!mean(is.na(AMRF)) >= 0.2)
Mortality_Female%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
# Filling in missing values
Mortality_Female<-Mortality_Female%>%group_by(Country)%>%mutate(value = imputeTS::na_interpolation(AMRF))
# Final cleanup
Mortality_Female<-select(Mortality_Female,-c(AMRF))
Mortality_Female%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
names(Mortality_Female)<-c("Country","Code","Year","AMRF")
# Transforming and cleaning - Adult Mortality Rate -Male
Mortality_Male<-read.csv("../Resources/Raw/Mortality_rate_male.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 4)
# Remove unwanted fields
Mortality_Male<-select(Mortality_Male,-c(Indicator.Name,Indicator.Code,X))
# Transform year column to rows
Mortality_Male<-gather(Mortality_Male,key="Year",value="AMRM",X1960:X2020)
#Select only required fields
Mortality_Male<-select(Mortality_Male,c(Country.Name,Country.Code, Year, AMRM))
# Replace X character in year with space and converted to numeric data type
Mortality_Male$Year<-gsub("X","",Mortality_Male$Year)%>%as.numeric(as.character(Mortality_Male$Year))
#Select data for year > 2000
Mortality_Male<-subset(Mortality_Male,Year>=2000)
#Customized column names
names(Mortality_Male)<-c("Country","Code","Year","AMRM")
#Check for missing values
Mortality_Male<-subset(Mortality_Male,Year<=2019)
Mortality_Male%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
# Handling missing values
Mortality_Male<-Mortality_Male%>%group_by(Country)%>%filter(!mean(is.na(AMRM)) >= 0.2)
Mortality_Male%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
# Filling in missing values
Mortality_Male<-Mortality_Male%>%group_by(Country)%>%mutate(value = imputeTS::na_interpolation(AMRM))
# Final cleanup
Mortality_Male<-select(Mortality_Male,-c(AMRM))
Mortality_Male%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
names(Mortality_Male)<-c("Country","Code","Year","AMRM")
#Merged Femal and Male Mortality values
Adult_Mortality = merge(x=Mortality_Female,y=Mortality_Male,by=c("Country","Year","Code"), all=TRUE)
#Taking average of adult mortality Male and Female values
clnames <- c("AMRF","AMRM")
Adult_Mortality$AMR  <- rowMeans( Adult_Mortality[,clnames] )
Adult_Mortality<-select(Adult_Mortality,c(Country,Code, Year, AMR))
names(Adult_Mortality)<-c("Country","Code","Year","AMR")
# Transforming and cleaning - Population Density
options(scipen = 999)
PD<-read.csv("../Resources/Raw/Population_Density.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 4)
# Remove unwanted fields
PD<-select(PD,-c(Indicator.Name,Indicator.Code,X))
# Transform year column to rows
PD<-gather(PD,key="Year",value="POPD",X1960:X2020)
#Select only required fields
PD<-select(PD,c(Country.Name,Country.Code, Year, POPD))
# Replace X character in year with space and converted to numeric data type
PD$Year<-gsub("X","",PD$Year)%>%as.numeric(as.character(PD$Year))
#Select data for year > 2000
PD<-subset(PD,Year>=2000)
#Customized column names
names(PD)<-c("Country","Code","Year","POPD")
#Check for missing values
PD%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
# Handling missing values
PD<-PD%>%group_by(Country)%>%filter(!mean(is.na(POPD)) >= 0.2)
PD%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
# Filling in missing values
PD<-PD%>%group_by(Country)%>%mutate(value = imputeTS::na_interpolation(POPD))
# Final cleanup
PD<-select(PD,-c(POPD))
PD%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
names(PD)<-c("Country","Code","Year","POPD")
# Transforming and cleaning - Population Growth
PG<-read.csv("../Resources/Raw/Population_Growth.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE, skip = 4)
# Remove unwanted fields
PG<-select(PG,-c(Indicator.Name,Indicator.Code,X))
# Transform year column to rows
PG<-gather(PG,key="Year",value="POPG",X1960:X2020)
#Select only required fields
PG<-select(PG,c(Country.Name,Country.Code, Year, POPG))
# Replace X character in year with space and converted to numeric data type
PG$Year<-gsub("X","",PG$Year)%>%as.numeric(as.character(PG$Year))
#Select data for year > 2000
PG<-subset(PG,Year>=2000)
#Customized column names
names(PG)<-c("Country","Code","Year","POPG")
#Check for missing values
PG%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
# Handling missing values
PG<-PG%>%group_by(Country)%>%filter(!mean(is.na(POPG)) >= 0.2)
PG%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
# Filling in missing values
PG<-PG%>%group_by(Country)%>%mutate(value = imputeTS::na_interpolation(POPG))
# Final cleanup
PG<-select(PG,-c(POPG))
PG%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
names(PG)<-c("Country","Code","Year","POPG")
# Transforming and cleaning - Happiness World Excel data
#Code block for extracting happiness score for 2015
Hap1_df<-read.csv("../Resources/Raw/2015.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Hap1_df$Year <- 2015
Hap1_df<-select(Hap1_df,c(Country, Year, Happiness.Score))
names(Hap1_df)<-c("Country","Year", "HAPS")
#Code block for extracting happiness score for 2016
Hap2_df<-read.csv("../Resources/Raw/2016.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Hap2_df$Year <- 2016
Hap2_df<-select(Hap2_df,c(Country, Year, Happiness.Score))
names(Hap2_df)<-c("Country","Year", "HAPS")
#Code block for extracting happiness score for 2017
Hap3_df<-read.csv("../Resources/Raw/2017.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Hap3_df$Year <- 2017
Hap3_df<-select(Hap3_df,c(Country, Year, Happiness.Score))
names(Hap3_df)<-c("Country","Year", "HAPS")
#Code block for extracting happiness score for 2018
Hap4_df<-read.csv("../Resources/Raw/2018.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Hap4_df$Year <- 2018
Hap4_df<-select(Hap4_df,c(Country.or.region, Year, Score))
names(Hap4_df)<-c("Country","Year", "HAPS")
#Code block for extracting happiness score for 2019
Hap5_df<-read.csv("../Resources/Raw/2019.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Hap5_df$Year <- 2019
Hap5_df<-select(Hap5_df,c(Country.or.region, Year, Score))
names(Hap5_df)<-c("Country","Year", "HAPS")
#To combine data vertically for all Happiness data sets for years 2015, 2016, 2017, 2018 and 2019
Hap_df <-rbind(Hap1_df, Hap2_df, Hap3_df, Hap4_df, Hap5_df)
#Check for missing values
Hap_df%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
# Clean and modify Status
Status<-read.csv("../Resources/Raw/Life Expectancy Data.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Status<-subset(Status,Year==2015)
Status<-select(Status,c(Country,Status))
# Human Development
# World Bank data
#Merge
HD_WB<-Reduce(function(...) merge(..., by=c("Country","Year","Code"),all=TRUE), list(le,gdp,gdp_growth,Mortality_Infant,Adult_Mortality))
#Get validated country code
HD_WB$Code<-countrycode(HD_WB$Country,"country.name","iso3c",warn=FALSE)
#Check for missing code values, inconsistent country names
filter(HD_WB,is.na(Code)&Year==2010)
#Drop the missing code values and country column
HD_WB<-HD_WB%>%drop_na(Code)%>%select(-c(Country))
# UNDP Data
#Merge
HD_UN<-Reduce(function(...) merge(..., by=c("Country","Year"),all=TRUE), list(hdi,edu,income))
#Add country code
HD_UN$Code<-countrycode(HD_UN$Country,"country.name","iso3c")
#Check for missing values
filter(HD_UN,is.na(Code))
#Drop country
HD_UN<-select(HD_UN,-c(Country))
# Health Expenditure
he_m<-he
#Add country code
he_m$Code<-countrycode(he_m$Country,"country.name","iso3c")
#Check for missing values
filter(he_m,is.na(Code))
#Drop country
he_m<-he_m%>%ungroup()%>%select(-c(Country))
# Complete merge
HD<-Reduce(function(...) merge(..., by=c("Code","Year"),all=TRUE), list(HD_WB,HD_UN,he_m))
# Transform to long format
human_development<-gather(HD,key="ind_cd",value="ind_value",na.rm=TRUE,LE:HE)
names(human_development)<-c("ctry_cd","year","ind_cd","ind_value")
# Substance Abuse
Alcohol_consumption_m<-Alcohol_consumption
#Get validated country code
Alcohol_consumption_m$Code<-countrycode(Alcohol_consumption_m$Country,"country.name","iso3c",warn=FALSE)
#Check for missing code values
filter(Alcohol_consumption_m,is.na(Code)&Year==2010)
#Drop country
Alcohol_consumption_m<-Alcohol_consumption_m%>%ungroup()%>%select(-c(Country))
# Transform to long format
substance_abuse<-gather(Alcohol_consumption_m,key="ind_id",value="ind_value",na.rm=TRUE,ALC)
names(substance_abuse)<-c("year","ctry_cd","ind_cd","ind_value")
substance_abuse<-substance_abuse[,c("ctry_cd","year","ind_cd","ind_value")]
# Social Determinants
# World Bank data
#Merge
SD_WB<-Reduce(function(...) merge(..., by=c("Country","Year","Code"),all=TRUE), list(PD,PG))
#Get validated country code
SD_WB$Code<-countrycode(SD_WB$Country,"country.name","iso3c",warn=FALSE)
#Check for missing code values, inconsistent country names
filter(SD_WB,is.na(Code)&Year==2010)
#Drop the missing code values and country column
SD_WB<-SD_WB%>%drop_na(Code)%>%select(-c(Country))
# UNDP Data
#Merge
SD_UN<-Reduce(function(...) merge(..., by=c("Country","Year"),all=TRUE), list(dw,sanitation))
#Add country code
SD_UN$Code<-countrycode(SD_UN$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values, inconsistent country names
filter(SD_UN,is.na(Code))
#Drop country
SD_UN<-select(SD_UN,-c(Country))
# Sex Ratio
sr_m<-sr
#Add country code
sr_m$Code<-countrycode(sr_m$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values
filter(sr_m,is.na(Code)&Year==2010)
#Drop country
sr_m<-sr_m%>%drop_na(Code)%>%ungroup()%>%select(-c(Country))
# Happiness Score
Hap_df_m<-Hap_df
#Add country code
Hap_df_m$Code<-countrycode(Hap_df_m$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values
filter(Hap_df_m,is.na(Code))
#Drop country
Hap_df_m<-Hap_df_m%>%drop_na(Code)%>%ungroup()%>%select(-c(Country))
# Complete merge
SD<-Reduce(function(...) merge(..., by=c("Code","Year"),all=TRUE), list(SD_WB,SD_UN,sr_m,Hap_df_m))
# Transform to long format
social_determinants<-gather(SD,key="ind_cd",value="ind_value",na.rm=TRUE,POPD:HAPS)
names(social_determinants)<-c("ctry_cd","year","ind_cd","ind_value")
# Infection Control Prevention
#Merge
vaccination<-Reduce(function(...) merge(..., by=c("Country","Year","Code"),all=TRUE), list(BCG,measles,hepatitis,diptheria))
#Add country code
vaccination$Code<-countrycode(vaccination$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values, inconsistent country names
filter(vaccination,is.na(Code)&Year==2010)
#Drop country
vaccination<-select(vaccination,-c(Country))
# Transform to long format
infect_ctrl_prevent<-gather(vaccination,key="ind_id",value="ind_value",na.rm=TRUE,BCG:DTP)
names(infect_ctrl_prevent)<-c("year","ctry_cd","ind_cd","ind_value")
infect_ctrl_prevent<-infect_ctrl_prevent[,c("ctry_cd","year","ind_cd","ind_value")]
# Infection Control Prevention
# Cancer
cancer_m<-cancer
#Handling inconsistent Country values
cancer_m$Country<-replace(cancer_m$Country,cancer_m$Country=="Micronesia (country)","Micronesia (Federated States of)")
cancer_m$Country<-replace(cancer_m$Country,cancer_m$Country=="Timor","Timor-Leste")
cancer_m$Country<-replace(cancer_m$Country,cancer_m$Country==c("England","Scotland","Wales"),"Great Britain")
# Averaging by year
cancer_m<-cancer_m%>%group_by(Country,Year,Code)%>%summarize(CANP=mean(CANP),.groups="keep")
#Replace country code
cancer_m$Code<-countrycode(cancer_m$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values,inconsistent data
filter(cancer_m,is.na(Code)&Year==2010)
#Drop country
cancer_m<-cancer_m%>%drop_na(Code)%>%ungroup()%>%select(-c(Country))
# Diabetes
diabetes_m<-diabetes
#Replace country code
diabetes_m$Code<-countrycode(diabetes_m$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values,inconsistent data
filter(diabetes_m,is.na(Code)&Year==2010)
#Drop country
diabetes_m<-diabetes_m%>%ungroup()%>%select(-c(Country))
# Obesity
obesity_m<-obesity
#Add country code
obesity_m$Code<-countrycode(obesity_m$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values,inconsistent data
filter(obesity_m,is.na(Code)&Year==2010)
#Drop country
obesity_m<-obesity_m%>%ungroup()%>%select(-c(Country))
# Merge
disease_int<-Reduce(function(...) merge(...,by=c("Year","Code"),all=TRUE), list(cancer_m,diabetes_m,obesity_m))
# Transform to long format
disease<-gather(disease_int,key="ind_id",value="ind_value",na.rm=TRUE,CANP:OBP)
names(disease)<-c("year","ctry_cd","ind_cd","ind_value")
disease<-disease[,c("ctry_cd","year","ind_cd","ind_value")]
CC_1<-select(HD,c(Code))
CC_2<-select(Alcohol_consumption_m,c(Code))
CC_3<-select(SD,c(Code))
CC_4<-select(vaccination,c(Code))
CC_5<-select(disease_int,c(Code))
# Join all tables based on unique entries
CC<-union(CC_1,CC_2,CC_3,CC_4,CC_5)
# Retrieve country name based on the code
CC$Country<-countrycode(CC$Code,"iso3c","country.name",warn=FALSE)
CC%>%filter(is.na(Country))
# Check duplicates
CC%>%group_by(Code)%>%count()%>%filter(n>1)
# Adding status column
Status$Code<-countrycode(Status$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values
filter(Status,is.na(Code))
#Drop country
Status<-select(Status,-c(Country))
country<-merge(CC,Status,by="Code",all=TRUE)
country%>%filter(is.na(Status))%>%count()
names(country)<-c("ctry_cd","ctry_desc","status")
con<-dbConnect(RPostgres::Postgres(),
host     = "aws-database.csfizhoftmnn.us-east-1.rds.amazonaws.com",
dbname   = "Final_Project",
user     = rstudioapi::askForPassword("Database user"),
password = rstudioapi::askForPassword("Database password"),
port     = 5432)
dbSendQuery(con,'DELETE FROM human_development')
dbWriteTable(con,"human_development",human_development,append=TRUE,overwrite=FALSE)
dbSendQuery(con,'DELETE FROM substance_abuse')
dbWriteTable(con,"substance_abuse",substance_abuse,append=TRUE,overwrite=FALSE)
dbSendQuery(con,'DELETE FROM social_determinants')
dbWriteTable(con,"social_determinants",social_determinants,append=TRUE,overwrite=FALSE)
dbSendQuery(con,'DELETE FROM infect_ctrl_prevent')
dbWriteTable(con,"infect_ctrl_prevent",infect_ctrl_prevent,append=TRUE,overwrite=FALSE)
dbSendQuery(con,'DELETE FROM disease')
dbWriteTable(con,"disease",disease,append=TRUE,overwrite=FALSE)
dbSendQuery(con,'DELETE FROM country')
dbWriteTable(con,"country",country,append=TRUE,overwrite=FALSE)
data<-dbGetQuery(con,'SELECT * FROM indicators')
res<-dbSendQuery(con,'DELETE FROM human_development')
dbClearResult(res)
dbWriteTable(con,"human_development",human_development,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM substance_abuse')
dbClearResult(res)
dbWriteTable(con,"substance_abuse",substance_abuse,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM social_determinants')
dbClearResult(res)
dbWriteTable(con,"social_determinants",social_determinants,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM infect_ctrl_prevent')
dbClearResult(res)
dbWriteTable(con,"infect_ctrl_prevent",infect_ctrl_prevent,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM disease')
dbClearResult(res)
dbWriteTable(con,"disease",disease,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM country')
dbClearResult(res)
dbWriteTable(con,"country",country,append=TRUE,overwrite=FALSE)
data<-dbGetQuery(con,'SELECT * FROM indicators')
View(cancer_m)
View(cancer)
# Handling missing values
cancer%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
# Transforming and cleaning - Cancer - Health
cancer<-read.csv("../Resources/Raw/Cancer.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE,na.strings="")
# Streamline
names(cancer)<-c("Country","Code","Year","CANP")
# Subsetting data
cancer<-subset(cancer,Year>=2000)
# Handling missing values
cancer%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
cancer<-drop_na(cancer)
cancer%>%group_by(Year)%>%count()
cancer<-cancer%>%complete(Year=seq(2000,2019),Country)%>%group_by(Country)%>%fill(c(Code,CANP),.direction="down") #Extending to 2019
cancer%>%group_by(Year)%>%count()
# Handling missing values
cancer%>%group_by(Country)%>%miss_var_summary()%>%filter(n_miss>0)
cancer_m<-cancer
#Handling inconsistent Country values
cancer_m$Country<-replace(cancer_m$Country,cancer_m$Country=="Micronesia (country)","Micronesia (Federated States of)")
cancer_m$Country<-replace(cancer_m$Country,cancer_m$Country=="Timor","Timor-Leste")
#Replace country code
cancer_m$Code<-countrycode(cancer_m$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values,inconsistent data
filter(cancer_m,is.na(Code)&Year==2010)
View(cancer_m)
#Drop country
cancer_m<-cancer_m%>%drop_na(Code)%>%ungroup()%>%select(-c(Country))
#Check for missing values,inconsistent data
filter(cancer_m,is.na(Code)&Year==2010)
CC_1<-select(HD,c(Code))
CC_2<-select(Alcohol_consumption_m,c(Code))
CC_3<-select(SD,c(Code))
CC_4<-select(vaccination,c(Code))
CC_5<-select(disease_int,c(Code))
# Join all tables based on unique entries
CC<-union(CC_1,CC_2,CC_3,CC_4,CC_5)
# Retrieve country name based on the code
CC$Country<-countrycode(CC$Code,"iso3c","country.name",warn=FALSE)
CC%>%filter(is.na(Country))
# Check duplicates
CC%>%group_by(Code)%>%count()%>%filter(n>1)
# Adding status column
Status$Code<-countrycode(Status$Country,"country.name","iso3c",warn=FALSE)
# Clean and modify Status
Status<-read.csv("../Resources/Raw/Life Expectancy Data.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Status<-subset(Status,Year==2015)
Status<-select(Status,c(Country,Status))
# Adding status column
Status$Code<-countrycode(Status$Country,"country.name","iso3c",warn=FALSE)
# Adding status column
Status$Code<-countrycode(Status$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values
filter(Status,is.na(Code))
#Drop country
Status<-select(Status,-c(Country))
#Drop country
Status<-select(Status,-c(Country))
# Clean and modify Status
Status<-read.csv("../Resources/Raw/Life Expectancy Data.csv",check.names=TRUE,header = TRUE, sep = ",", stringsAsFactors = FALSE)
Status<-subset(Status,Year==2015)
Status<-select(Status,c(Country,Status))
CC_1<-select(HD,c(Code))
CC_2<-select(Alcohol_consumption_m,c(Code))
CC_3<-select(SD,c(Code))
CC_4<-select(vaccination,c(Code))
CC_5<-select(disease_int,c(Code))
# Join all tables based on unique entries
CC<-union(CC_1,CC_2,CC_3,CC_4,CC_5)
# Retrieve country name based on the code
CC$Country<-countrycode(CC$Code,"iso3c","country.name",warn=FALSE)
CC%>%filter(is.na(Country))
# Check duplicates
CC%>%group_by(Code)%>%count()%>%filter(n>1)
# Adding status column
Status$Code<-countrycode(Status$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values
filter(Status,is.na(Code))
#Drop country
Status<-select(Status,-c(Country))
country<-merge(CC,Status,by="Code",all=TRUE)
country%>%filter(is.na(Status))%>%count()
names(country)<-c("ctry_cd","ctry_desc","status")
con<-dbConnect(RPostgres::Postgres(),
host     = "aws-database.csfizhoftmnn.us-east-1.rds.amazonaws.com",
dbname   = "Final_Project",
user     = rstudioapi::askForPassword("Database user"),
password = rstudioapi::askForPassword("Database password"),
port     = 5432)
res<-dbSendQuery(con,'DELETE FROM disease')
dbClearResult(res)
dbWriteTable(con,"disease",disease,append=TRUE,overwrite=FALSE)
res<-dbSendQuery(con,'DELETE FROM country')
dbClearResult(res)
dbWriteTable(con,"country",country,append=TRUE,overwrite=FALSE)
data<-dbGetQuery(con,'SELECT * FROM indicators')
View(data)
res<-dbSendQuery(con,'DELETE FROM disease')
# Infection Control Prevention
# Cancer
cancer_m<-cancer
#Handling inconsistent Country values
cancer_m$Country<-replace(cancer_m$Country,cancer_m$Country=="Micronesia (country)","Micronesia (Federated States of)")
cancer_m$Country<-replace(cancer_m$Country,cancer_m$Country=="Timor","Timor-Leste")
#Replace country code
cancer_m$Code<-countrycode(cancer_m$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values,inconsistent data
filter(cancer_m,is.na(Code)&Year==2010)
#Drop country
cancer_m<-cancer_m%>%drop_na(Code)%>%ungroup()%>%select(-c(Country))
# Diabetes
diabetes_m<-diabetes
#Replace country code
diabetes_m$Code<-countrycode(diabetes_m$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values,inconsistent data
filter(diabetes_m,is.na(Code)&Year==2010)
#Drop country
diabetes_m<-diabetes_m%>%ungroup()%>%select(-c(Country))
# Obesity
obesity_m<-obesity
#Add country code
obesity_m$Code<-countrycode(obesity_m$Country,"country.name","iso3c",warn=FALSE)
#Check for missing values,inconsistent data
filter(obesity_m,is.na(Code)&Year==2010)
#Drop country
obesity_m<-obesity_m%>%ungroup()%>%select(-c(Country))
# Merge
disease_int<-Reduce(function(...) merge(...,by=c("Year","Code"),all=TRUE), list(cancer_m,diabetes_m,obesity_m))
# Transform to long format
disease<-gather(disease_int,key="ind_id",value="ind_value",na.rm=TRUE,CANP:OBP)
names(disease)<-c("year","ctry_cd","ind_cd","ind_value")
disease<-disease[,c("ctry_cd","year","ind_cd","ind_value")]
res<-dbSendQuery(con,'DELETE FROM disease')
dbClearResult(res)
dbWriteTable(con,"disease",disease,append=TRUE,overwrite=FALSE)
data<-dbGetQuery(con,'SELECT * FROM indicators')
View(Hap_df)
View(Hap_df_m)
View(CC)
View(le)
#Averaging based on Code to handle duplicates for Cyprus
Hap_df_m<-Hap_df_m%>%group_by(Code,Year)%>%summarize(HAPS=mean(HAPS))
#Averaging based on Code to handle duplicates for Cyprus
Hap_df_m<-Hap_df_m%>%group_by(Code,Year)%>%summarize(HAPS=mean(HAPS),.groups='keep')%>%ungroup()
# Complete merge
SD<-Reduce(function(...) merge(..., by=c("Code","Year"),all=TRUE), list(SD_WB,SD_UN,sr_m,Hap_df_m))
# Transform to long format
social_determinants<-gather(SD,key="ind_cd",value="ind_value",na.rm=TRUE,POPD:HAPS)
names(social_determinants)<-c("ctry_cd","year","ind_cd","ind_value")
View(social_determinants)
res<-dbSendQuery(con,'DELETE FROM social_determinants')
dbClearResult(res)
dbWriteTable(con,"social_determinants",social_determinants,append=TRUE,overwrite=FALSE)
data<-dbGetQuery(con,'SELECT * FROM indicators')
